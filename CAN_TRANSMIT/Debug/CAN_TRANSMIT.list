
CAN_TRANSMIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c3c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dec  08005dec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000230  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010797  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002446  00000000  00000000  00030816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f40  00000000  00000000  00032c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf4  00000000  00000000  00033ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ff3  00000000  00000000  00034794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001196f  00000000  00000000  00056787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6cb7  00000000  00000000  000680f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004244  00000000  00000000  0013edb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00142ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dac 	.word	0x08005dac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005dac 	.word	0x08005dac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <uart_Init>:
uint8_t RxData[8], Temp_LSB = 0, Temp_MSB = 0;
uint16_t Temp;
float Temperature;

void uart_Init (uint32_t baud)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	  huart2.Instance = USART2;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <uart_Init+0x50>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <uart_Init+0x54>)
 8000cac:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = baud;
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <uart_Init+0x50>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6053      	str	r3, [r2, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <uart_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <uart_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <uart_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <uart_Init+0x50>)
 8000cc8:	220c      	movs	r2, #12
 8000cca:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <uart_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <uart_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <uart_Init+0x50>)
 8000cda:	f003 fcdf 	bl	800469c <HAL_HalfDuplex_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <uart_Init+0x48>
	  {
	    Error_Handler();
 8000ce4:	f000 fc7a 	bl	80015dc <Error_Handler>
	  }
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200000e0 	.word	0x200000e0
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <DS18B20_Start>:

int DS18B20_Start (void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	uint8_t data = 0xf0;
 8000cfe:	23f0      	movs	r3, #240	; 0xf0
 8000d00:	71fb      	strb	r3, [r7, #7]
	uart_Init(9600);
 8000d02:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000d06:	f7ff ffcb 	bl	8000ca0 <uart_Init>
	HAL_UART_Transmit(&huart2, &data,1,100);
 8000d0a:	1df9      	adds	r1, r7, #7
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	480f      	ldr	r0, [pc, #60]	; (8000d50 <DS18B20_Start+0x58>)
 8000d12:	f003 fd1b 	bl	800474c <HAL_UART_Transmit>
	if (HAL_UART_Receive(&huart2,&data,1,1000) != HAL_OK) return -1;
 8000d16:	1df9      	adds	r1, r7, #7
 8000d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <DS18B20_Start+0x58>)
 8000d20:	f003 fd9f 	bl	8004862 <HAL_UART_Receive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <DS18B20_Start+0x38>
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e00a      	b.n	8000d46 <DS18B20_Start+0x4e>
	uart_Init(115200);
 8000d30:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000d34:	f7ff ffb4 	bl	8000ca0 <uart_Init>
	if (data == 0xf0) return -2;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2bf0      	cmp	r3, #240	; 0xf0
 8000d3c:	d102      	bne.n	8000d44 <DS18B20_Start+0x4c>
 8000d3e:	f06f 0301 	mvn.w	r3, #1
 8000d42:	e000      	b.n	8000d46 <DS18B20_Start+0x4e>
	return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000e0 	.word	0x200000e0

08000d54 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];
	for (int i=0; i<8; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e017      	b.n	8000d94 <DS18B20_Write+0x40>
	{
		if ((data & (1<<i)) != 0)
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa42 f303 	asr.w	r3, r2, r3
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <DS18B20_Write+0x2e>
		{
			buffer[i] = 0xFF;
 8000d74:	f107 020c 	add.w	r2, r7, #12
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e005      	b.n	8000d8e <DS18B20_Write+0x3a>
		}
		else
		{
			buffer[i] = 0x00;
 8000d82:	f107 020c 	add.w	r2, r7, #12
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	4413      	add	r3, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	dde4      	ble.n	8000d64 <DS18B20_Write+0x10>
		}
	}
	HAL_UART_Transmit(&huart2, buffer, 8, 1000);
 8000d9a:	f107 010c 	add.w	r1, r7, #12
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	2208      	movs	r2, #8
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <DS18B20_Write+0x60>)
 8000da6:	f003 fcd1 	bl	800474c <HAL_UART_Transmit>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000e0 	.word	0x200000e0

08000db8 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
	uint8_t buffer[8];
	uint8_t value = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<8; i++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	e007      	b.n	8000dd8 <DS18B20_Read+0x20>
	{
		buffer[i] = 0xFF;
 8000dc8:	1d3a      	adds	r2, r7, #4
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4413      	add	r3, r2
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	ddf4      	ble.n	8000dc8 <DS18B20_Read+0x10>
	}
	HAL_UART_Transmit_DMA(&huart2, buffer, 8);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2208      	movs	r2, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <DS18B20_Read+0x88>)
 8000de6:	f003 fdd3 	bl	8004990 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart2, RxData, 8);
 8000dea:	2208      	movs	r2, #8
 8000dec:	4915      	ldr	r1, [pc, #84]	; (8000e44 <DS18B20_Read+0x8c>)
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <DS18B20_Read+0x88>)
 8000df0:	f003 fe3e 	bl	8004a70 <HAL_UART_Receive_DMA>

	while (isRxed == 0);
 8000df4:	bf00      	nop
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <DS18B20_Read+0x90>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0fb      	beq.n	8000df6 <DS18B20_Read+0x3e>

	for (int i=0; i<8; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e012      	b.n	8000e2a <DS18B20_Read+0x72>
	{
		if (RxData[i] == 0xFF)
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <DS18B20_Read+0x8c>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d109      	bne.n	8000e24 <DS18B20_Read+0x6c>
		{
			value |= 1<<i;
 8000e10:	2201      	movs	r2, #1
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<8; i++)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	dde9      	ble.n	8000e04 <DS18B20_Read+0x4c>
		}
	}

	isRxed = 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <DS18B20_Read+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
	return value;
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000e0 	.word	0x200000e0
 8000e44:	20000228 	.word	0x20000228
 8000e48:	20000224 	.word	0x20000224

08000e4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	isRxed = 1;
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_UART_RxCpltCallback+0x1c>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000224 	.word	0x20000224
 8000e6c:	00000000 	.word	0x00000000

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f000 fddf 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f953 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fae1 	bl	8001444 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e82:	f000 fab7 	bl	80013f4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e86:	f000 fa3d 	bl	8001304 <MX_TIM3_Init>
  MX_CAN1_Init();
 8000e8a:	f000 fa05 	bl	8001298 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f9b1 	bl	80011f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e92:	f000 fa85 	bl	80013a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

 if  (HAL_TIM_Base_Start(&htim3)!= HAL_OK)
 8000e96:	4892      	ldr	r0, [pc, #584]	; (80010e0 <main+0x270>)
 8000e98:	f003 f90e 	bl	80040b8 <HAL_TIM_Base_Start>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0x36>
	  	 	     {
	  	 	    Error_Handler();
 8000ea2:	f000 fb9b 	bl	80015dc <Error_Handler>
	  	 	     }
      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	488e      	ldr	r0, [pc, #568]	; (80010e4 <main+0x274>)
 8000eac:	f002 fbea 	bl	8003684 <HAL_GPIO_WritePin>


   if (HAL_CAN_Start(&hcan1)!= HAL_OK)
 8000eb0:	488d      	ldr	r0, [pc, #564]	; (80010e8 <main+0x278>)
 8000eb2:	f001 fc0a 	bl	80026ca <HAL_CAN_Start>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <main+0x50>
 		  {
 		    Error_Handler();
 8000ebc:	f000 fb8e 	bl	80015dc <Error_Handler>
 		  }

        pTxHeader.DLC=4;
 8000ec0:	4b8a      	ldr	r3, [pc, #552]	; (80010ec <main+0x27c>)
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	611a      	str	r2, [r3, #16]
	    pTxHeader.ExtId=0;
 8000ec6:	4b89      	ldr	r3, [pc, #548]	; (80010ec <main+0x27c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
	    pTxHeader.IDE=CAN_ID_STD;
 8000ecc:	4b87      	ldr	r3, [pc, #540]	; (80010ec <main+0x27c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
	    pTxHeader.StdId=0x215;
 8000ed2:	4b86      	ldr	r3, [pc, #536]	; (80010ec <main+0x27c>)
 8000ed4:	f240 2215 	movw	r2, #533	; 0x215
 8000ed8:	601a      	str	r2, [r3, #0]
	    pTxHeader.RTR=CAN_RTR_DATA;
 8000eda:	4b84      	ldr	r3, [pc, #528]	; (80010ec <main+0x27c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
	    pTxHeader.TransmitGlobalTime = DISABLE;
 8000ee0:	4b82      	ldr	r3, [pc, #520]	; (80010ec <main+0x27c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	751a      	strb	r2, [r3, #20]


	    if (HAL_ADC_Start_IT(&hadc1)!= HAL_OK)
 8000ee6:	4882      	ldr	r0, [pc, #520]	; (80010f0 <main+0x280>)
 8000ee8:	f000 fe80 	bl	8001bec <HAL_ADC_Start_IT>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <main+0x86>
	 	     {
	 	    Error_Handler();
 8000ef2:	f000 fb73 	bl	80015dc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // tirez la broche TRIG vers l'etat 1
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2101      	movs	r1, #1
 8000efa:	487a      	ldr	r0, [pc, #488]	; (80010e4 <main+0x274>)
 8000efc:	f002 fbc2 	bl	8003684 <HAL_GPIO_WritePin>
	   	     __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000f00:	4b77      	ldr	r3, [pc, #476]	; (80010e0 <main+0x270>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
	   	     while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // attends 10 us
 8000f08:	bf00      	nop
 8000f0a:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <main+0x270>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d9fa      	bls.n	8000f0a <main+0x9a>
	   	     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // tirez la broche TRIG vers l'etat 0
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	4872      	ldr	r0, [pc, #456]	; (80010e4 <main+0x274>)
 8000f1a:	f002 fbb3 	bl	8003684 <HAL_GPIO_WritePin>

	   	     pMillis = HAL_GetTick(); // utilisé ceci pour éviter une boucle while infinie (pour le délai d'attente)
 8000f1e:	f000 fdf1 	bl	8001b04 <HAL_GetTick>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a73      	ldr	r2, [pc, #460]	; (80010f4 <main+0x284>)
 8000f26:	6013      	str	r3, [r2, #0]
	   	     // attends que la broche d'écho monte en haut
	   	     while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000f28:	bf00      	nop
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	486d      	ldr	r0, [pc, #436]	; (80010e4 <main+0x274>)
 8000f2e:	f002 fb91 	bl	8003654 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d108      	bne.n	8000f4a <main+0xda>
 8000f38:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <main+0x284>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f103 040a 	add.w	r4, r3, #10
 8000f40:	f000 fde0 	bl	8001b04 <HAL_GetTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	429c      	cmp	r4, r3
 8000f48:	d8ef      	bhi.n	8000f2a <main+0xba>
	   	     Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 8000f4a:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <main+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	4a69      	ldr	r2, [pc, #420]	; (80010f8 <main+0x288>)
 8000f52:	6013      	str	r3, [r2, #0]

	   	     pMillis = HAL_GetTick(); // utilisé ceci pour éviter une boucle while infinie (pour le délai d'attente)
 8000f54:	f000 fdd6 	bl	8001b04 <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <main+0x284>)
 8000f5c:	6013      	str	r3, [r2, #0]
	   	     // attends que la broche d'écho descende au niveau bas
	   	     while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000f5e:	bf00      	nop
 8000f60:	2102      	movs	r1, #2
 8000f62:	4860      	ldr	r0, [pc, #384]	; (80010e4 <main+0x274>)
 8000f64:	f002 fb76 	bl	8003654 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <main+0x110>
 8000f6e:	4b61      	ldr	r3, [pc, #388]	; (80010f4 <main+0x284>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000f76:	f000 fdc5 	bl	8001b04 <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	429c      	cmp	r4, r3
 8000f7e:	d8ef      	bhi.n	8000f60 <main+0xf0>
	   	     Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8000f80:	4b57      	ldr	r3, [pc, #348]	; (80010e0 <main+0x270>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <main+0x28c>)
 8000f88:	6013      	str	r3, [r2, #0]

	   	     Distance = (Value2-Value1)* 0.034/2;
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <main+0x28c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <main+0x288>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa59 	bl	800044c <__aeabi_ui2d>
 8000f9a:	a34f      	add	r3, pc, #316	; (adr r3, 80010d8 <main+0x268>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff face 	bl	8000540 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb4:	f7ff fbee 	bl	8000794 <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fcd0 	bl	8000964 <__aeabi_d2uiz>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <main+0x290>)
 8000fca:	801a      	strh	r2, [r3, #0]
	   	      HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd0:	f000 fda4 	bl	8001b1c <HAL_Delay>

	  	   if (adc_valid == 1)
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <main+0x294>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d11d      	bne.n	8001018 <main+0x1a8>
	  	   	  	 {
	  		      value = HAL_ADC_GetValue(&hadc1);
 8000fdc:	4844      	ldr	r0, [pc, #272]	; (80010f0 <main+0x280>)
 8000fde:	f001 f830 	bl	8002042 <HAL_ADC_GetValue>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <main+0x298>)
 8000fe6:	6013      	str	r3, [r2, #0]
	  	    if (HAL_ADC_Stop_IT(&hadc1)!= HAL_OK)
 8000fe8:	4841      	ldr	r0, [pc, #260]	; (80010f0 <main+0x280>)
 8000fea:	f000 fedd 	bl	8001da8 <HAL_ADC_Stop_IT>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <main+0x188>
	  		    	 {
	  		        Error_Handler();
 8000ff4:	f000 faf2 	bl	80015dc <Error_Handler>
	  		    	 }
	  		      aTxData[0] = value;
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <main+0x298>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <main+0x29c>)
 8001000:	701a      	strb	r2, [r3, #0]
	  	   	  	  adc_valid = 0;
 8001002:	4b40      	ldr	r3, [pc, #256]	; (8001104 <main+0x294>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	  	   	 if (HAL_ADC_Start_IT(&hadc1)!= HAL_OK)
 8001008:	4839      	ldr	r0, [pc, #228]	; (80010f0 <main+0x280>)
 800100a:	f000 fdef 	bl	8001bec <HAL_ADC_Start_IT>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <main+0x1a8>
		  	 	     {
		  	 	    Error_Handler();
 8001014:	f000 fae2 	bl	80015dc <Error_Handler>
		  	 	     }
	  	   	  	 }
	  	       HAL_Delay(1000);
 8001018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101c:	f000 fd7e 	bl	8001b1c <HAL_Delay>

	  	       // Verifier la presence du sonde DS18B20
	  	          presence = DS18B20_Start();
 8001020:	f7ff fe6a 	bl	8000cf8 <DS18B20_Start>
 8001024:	4603      	mov	r3, r0
 8001026:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <main+0x2a0>)
 8001028:	6013      	str	r3, [r2, #0]

	  	       // Ecrire les commandes d'activation du sonde DS18B20
	  	    	  DS18B20_Write(0xCC);
 800102a:	20cc      	movs	r0, #204	; 0xcc
 800102c:	f7ff fe92 	bl	8000d54 <DS18B20_Write>
	  	    	  DS18B20_Write(0x44);
 8001030:	2044      	movs	r0, #68	; 0x44
 8001032:	f7ff fe8f 	bl	8000d54 <DS18B20_Write>

	  	    	  presence = DS18B20_Start();
 8001036:	f7ff fe5f 	bl	8000cf8 <DS18B20_Start>
 800103a:	4603      	mov	r3, r0
 800103c:	4a34      	ldr	r2, [pc, #208]	; (8001110 <main+0x2a0>)
 800103e:	6013      	str	r3, [r2, #0]
	  	          DS18B20_Write(0xCC);
 8001040:	20cc      	movs	r0, #204	; 0xcc
 8001042:	f7ff fe87 	bl	8000d54 <DS18B20_Write>
	  	    	  DS18B20_Write(0xBE);
 8001046:	20be      	movs	r0, #190	; 0xbe
 8001048:	f7ff fe84 	bl	8000d54 <DS18B20_Write>

	  	    	  Temp_LSB = DS18B20_Read();
 800104c:	f7ff feb4 	bl	8000db8 <DS18B20_Read>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <main+0x2a4>)
 8001056:	701a      	strb	r2, [r3, #0]
	  	    	  Temp_MSB = DS18B20_Read();
 8001058:	f7ff feae 	bl	8000db8 <DS18B20_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <main+0x2a8>)
 8001062:	701a      	strb	r2, [r3, #0]
	  	    	  Temp = (Temp_MSB<<8) | Temp_LSB;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <main+0x2a8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <main+0x2a4>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <main+0x2ac>)
 800107a:	801a      	strh	r2, [r3, #0]
	  	    	  Temperature = (float)Temp/16.0;
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <main+0x2ac>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001088:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <main+0x2b0>)
 8001092:	edc3 7a00 	vstr	s15, [r3]
	  	    	  HAL_Delay(2000);
 8001096:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800109a:	f000 fd3f 	bl	8001b1c <HAL_Delay>

	  	   	aTxData[1] = Distance;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <main+0x290>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <main+0x29c>)
 80010a6:	705a      	strb	r2, [r3, #1]
	  	    aTxData[2] = Temperature;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <main+0x2b0>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <main+0x29c>)
 80010bc:	709a      	strb	r2, [r3, #2]

	  	  if (HAL_CAN_AddTxMessage(&hcan1,&pTxHeader,aTxData,(uint32_t *)CAN_TX_MAILBOX0)!= HAL_OK)
 80010be:	2301      	movs	r3, #1
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <main+0x29c>)
 80010c2:	490a      	ldr	r1, [pc, #40]	; (80010ec <main+0x27c>)
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <main+0x278>)
 80010c6:	f001 fb44 	bl	8002752 <HAL_CAN_AddTxMessage>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f43f af12 	beq.w	8000ef6 <main+0x86>
	  	  	  	 		  	 	     {
	  	  	  	 		  	 	    Error_Handler();
 80010d2:	f000 fa83 	bl	80015dc <Error_Handler>
	        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // tirez la broche TRIG vers l'etat 1
 80010d6:	e70e      	b.n	8000ef6 <main+0x86>
 80010d8:	b020c49c 	.word	0xb020c49c
 80010dc:	3fa16872 	.word	0x3fa16872
 80010e0:	20000098 	.word	0x20000098
 80010e4:	40020400 	.word	0x40020400
 80010e8:	20000070 	.word	0x20000070
 80010ec:	200001f8 	.word	0x200001f8
 80010f0:	20000028 	.word	0x20000028
 80010f4:	200001e8 	.word	0x200001e8
 80010f8:	200001ec 	.word	0x200001ec
 80010fc:	200001f0 	.word	0x200001f0
 8001100:	200001f4 	.word	0x200001f4
 8001104:	2000021c 	.word	0x2000021c
 8001108:	20000218 	.word	0x20000218
 800110c:	20000210 	.word	0x20000210
 8001110:	20000220 	.word	0x20000220
 8001114:	20000230 	.word	0x20000230
 8001118:	20000231 	.word	0x20000231
 800111c:	20000232 	.word	0x20000232
 8001120:	20000234 	.word	0x20000234

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fe0e 	bl	8005d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <SystemClock_Config+0xc8>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <SystemClock_Config+0xc8>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <SystemClock_Config+0xc8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <SystemClock_Config+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <SystemClock_Config+0xcc>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <SystemClock_Config+0xcc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001194:	2308      	movs	r3, #8
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001198:	2348      	movs	r3, #72	; 0x48
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fa9d 	bl	80036e8 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b4:	f000 fa12 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2102      	movs	r1, #2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fcff 	bl	8003bd8 <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e0:	f000 f9fc 	bl	80015dc <Error_Handler>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3750      	adds	r7, #80	; 0x50
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000

080011f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_ADC1_Init+0x98>)
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <MX_ADC1_Init+0x9c>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_ADC1_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_ADC1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_ADC1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_ADC1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_ADC1_Init+0x98>)
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <MX_ADC1_Init+0xa0>)
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_ADC1_Init+0x98>)
 8001240:	2201      	movs	r2, #1
 8001242:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_ADC1_Init+0x98>)
 800124e:	2201      	movs	r2, #1
 8001250:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <MX_ADC1_Init+0x98>)
 8001254:	f000 fc86 	bl	8001b64 <HAL_ADC_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f9bd 	bl	80015dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001262:	2301      	movs	r3, #1
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_ADC1_Init+0x98>)
 8001274:	f000 ff06 	bl	8002084 <HAL_ADC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800127e:	f000 f9ad 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000028 	.word	0x20000028
 8001290:	40012000 	.word	0x40012000
 8001294:	0f000001 	.word	0x0f000001

08001298 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_CAN1_Init+0x64>)
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <MX_CAN1_Init+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_CAN1_Init+0x64>)
 80012a4:	2204      	movs	r2, #4
 80012a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_CAN1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_CAN1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_CAN1_Init+0x64>)
 80012b6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80012ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_CAN1_Init+0x64>)
 80012be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_CAN1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_CAN1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_CAN1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_CAN1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_CAN1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_CAN1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_CAN1_Init+0x64>)
 80012ea:	f001 f8f3 	bl	80024d4 <HAL_CAN_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012f4:	f000 f972 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000070 	.word	0x20000070
 8001300:	40006400 	.word	0x40006400

08001304 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_TIM3_Init+0x94>)
 8001322:	4a1e      	ldr	r2, [pc, #120]	; (800139c <MX_TIM3_Init+0x98>)
 8001324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_TIM3_Init+0x94>)
 8001328:	2247      	movs	r2, #71	; 0x47
 800132a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_TIM3_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_TIM3_Init+0x94>)
 8001334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001338:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_TIM3_Init+0x94>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_TIM3_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <MX_TIM3_Init+0x94>)
 8001348:	f002 fe66 	bl	8004018 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 f943 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4619      	mov	r1, r3
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_TIM3_Init+0x94>)
 8001364:	f002 ff10 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800136e:	f000 f935 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_TIM3_Init+0x94>)
 8001380:	f003 f910 	bl	80045a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800138a:	f000 f927 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000098 	.word	0x20000098
 800139c:	40000400 	.word	0x40000400

080013a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f003 f960 	bl	800469c <HAL_HalfDuplex_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f8fb 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000e0 	.word	0x200000e0
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_DMA_Init+0x4c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <MX_DMA_Init+0x4c>)
 8001404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_DMA_Init+0x4c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2010      	movs	r0, #16
 800141c:	f001 fb45 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001420:	2010      	movs	r0, #16
 8001422:	f001 fb5e 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2011      	movs	r0, #17
 800142c:	f001 fb3d 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001430:	2011      	movs	r0, #17
 8001432:	f001 fb56 	bl	8002ae2 <HAL_NVIC_EnableIRQ>

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <MX_GPIO_Init+0x120>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a40      	ldr	r2, [pc, #256]	; (8001564 <MX_GPIO_Init+0x120>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <MX_GPIO_Init+0x120>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <MX_GPIO_Init+0x120>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a39      	ldr	r2, [pc, #228]	; (8001564 <MX_GPIO_Init+0x120>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <MX_GPIO_Init+0x120>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <MX_GPIO_Init+0x120>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <MX_GPIO_Init+0x120>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <MX_GPIO_Init+0x120>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_GPIO_Init+0x120>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <MX_GPIO_Init+0x120>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <MX_GPIO_Init+0x120>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2101      	movs	r1, #1
 80014ce:	4826      	ldr	r0, [pc, #152]	; (8001568 <MX_GPIO_Init+0x124>)
 80014d0:	f002 f8d8 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_Pin|ORANGE_Pin|RED_Pin|BLUE_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014da:	4824      	ldr	r0, [pc, #144]	; (800156c <MX_GPIO_Init+0x128>)
 80014dc:	f002 f8d2 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e0:	2301      	movs	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	481e      	ldr	r0, [pc, #120]	; (8001570 <MX_GPIO_Init+0x12c>)
 80014f6:	f001 ff11 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014fa:	2301      	movs	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4815      	ldr	r0, [pc, #84]	; (8001568 <MX_GPIO_Init+0x124>)
 8001512:	f001 ff03 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001516:	2302      	movs	r3, #2
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <MX_GPIO_Init+0x124>)
 800152a:	f001 fef7 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_Pin ORANGE_Pin RED_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin|ORANGE_Pin|RED_Pin|BLUE_Pin;
 800152e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <MX_GPIO_Init+0x128>)
 8001548:	f001 fee8 	bl	800331c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	2006      	movs	r0, #6
 8001552:	f001 faaa 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001556:	2006      	movs	r0, #6
 8001558:	f001 fac3 	bl	8002ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

      adc_valid = 1;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_ADC_ConvCpltCallback+0x1c>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]

}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000021c 	.word	0x2000021c

08001594 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10c      	bne.n	80015be <HAL_GPIO_EXTI_Callback+0x2a>
	{
		modeselection++;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80015ae:	701a      	strb	r2, [r3, #0]
		if (modeselection > 2)
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d902      	bls.n	80015be <HAL_GPIO_EXTI_Callback+0x2a>
		{
			modeselection = 0;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
		}
	}
	aTxData[3] = modeselection;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80015c4:	70da      	strb	r2, [r3, #3]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000021d 	.word	0x2000021d
 80015d8:	20000210 	.word	0x20000210

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_MspInit+0x4c>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_ADC_MspInit+0x8c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12f      	bne.n	80016ba <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_ADC_MspInit+0x90>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_ADC_MspInit+0x90>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_ADC_MspInit+0x90>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_ADC_MspInit+0x90>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_ADC_MspInit+0x90>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_ADC_MspInit+0x90>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001692:	2302      	movs	r3, #2
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_ADC_MspInit+0x94>)
 80016a6:	f001 fe39 	bl	800331c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2012      	movs	r0, #18
 80016b0:	f001 f9fb 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016b4:	2012      	movs	r0, #18
 80016b6:	f001 fa14 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40012000 	.word	0x40012000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_CAN_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_CAN_MspInit+0x88>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_CAN_MspInit+0x88>)
 80016fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_CAN_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_CAN_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_CAN_MspInit+0x88>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_CAN_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800172a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800173c:	2309      	movs	r3, #9
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_CAN_MspInit+0x8c>)
 8001748:	f001 fde8 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40006400 	.word	0x40006400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_TIM_Base_MspInit+0x3c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10d      	bne.n	800178e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_TIM_Base_MspInit+0x40>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_TIM_Base_MspInit+0x40>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_TIM_Base_MspInit+0x40>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40000400 	.word	0x40000400
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <HAL_UART_MspInit+0x14c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f040 8090 	bne.w	80018e8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_UART_MspInit+0x150>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_UART_MspInit+0x150>)
 80017d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <HAL_UART_MspInit+0x150>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_UART_MspInit+0x150>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a41      	ldr	r2, [pc, #260]	; (80018f4 <HAL_UART_MspInit+0x150>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_UART_MspInit+0x150>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001800:	2304      	movs	r3, #4
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001804:	2312      	movs	r3, #18
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001810:	2307      	movs	r3, #7
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4837      	ldr	r0, [pc, #220]	; (80018f8 <HAL_UART_MspInit+0x154>)
 800181c:	f001 fd7e 	bl	800331c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001822:	4a37      	ldr	r2, [pc, #220]	; (8001900 <HAL_UART_MspInit+0x15c>)
 8001824:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001828:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_UART_MspInit+0x158>)
 800183c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001840:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_UART_MspInit+0x158>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_UART_MspInit+0x158>)
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001860:	4826      	ldr	r0, [pc, #152]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001862:	f001 f959 	bl	8002b18 <HAL_DMA_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800186c:	f7ff feb6 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001874:	63da      	str	r2, [r3, #60]	; 0x3c
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_UART_MspInit+0x158>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_UART_MspInit+0x160>)
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_UART_MspInit+0x164>)
 8001880:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_UART_MspInit+0x160>)
 8001884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001888:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_UART_MspInit+0x160>)
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_UART_MspInit+0x160>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_UART_MspInit+0x160>)
 8001898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018be:	f001 f92b 	bl	8002b18 <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80018c8:	f7ff fe88 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <HAL_UART_MspInit+0x160>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2026      	movs	r0, #38	; 0x26
 80018de:	f001 f8e4 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018e2:	2026      	movs	r0, #38	; 0x26
 80018e4:	f001 f8fd 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40004400 	.word	0x40004400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	20000128 	.word	0x20000128
 8001900:	40026088 	.word	0x40026088
 8001904:	20000188 	.word	0x20000188
 8001908:	400260a0 	.word	0x400260a0

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f8c0 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001964:	2001      	movs	r0, #1
 8001966:	f001 fea7 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA1_Stream5_IRQHandler+0x10>)
 8001976:	f001 fa67 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000128 	.word	0x20000128

08001984 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Stream6_IRQHandler+0x10>)
 800198a:	f001 fa5d 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000188 	.word	0x20000188

08001998 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <ADC_IRQHandler+0x10>)
 800199e:	f000 fa40 	bl	8001e22 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000028 	.word	0x20000028

080019ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <USART2_IRQHandler+0x10>)
 80019b2:	f003 f883 	bl	8004abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000e0 	.word	0x200000e0

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019e8:	f7ff ffea 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	; (8001a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	; (8001a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f004 f9a7 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fa2b 	bl	8000e70 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a28:	08005df4 	.word	0x08005df4
  ldr r2, =_sbss
 8001a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a30:	2000023c 	.word	0x2000023c

08001a34 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <CAN1_RX0_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f001 f817 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fdbc 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 f82f 	bl	8002afe <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 fff7 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000238 	.word	0x20000238

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000238 	.word	0x20000238

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e033      	b.n	8001be2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fd58 	bl	8001638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001baa:	f023 0302 	bic.w	r3, r3, #2
 8001bae:	f043 0202 	orr.w	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fb86 	bl	80022c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd2:	e001      	b.n	8001bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Start_IT+0x1a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0bd      	b.n	8001d82 <HAL_ADC_Start_IT+0x196>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d018      	beq.n	8001c4e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2c:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_ADC_Start_IT+0x1a4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_ADC_Start_IT+0x1a8>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9a      	lsrs	r2, r3, #18
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	f040 8085 	bne.w	8001d68 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9c:	d106      	bne.n	8001cac <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f023 0206 	bic.w	r2, r3, #6
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8001caa:	e002      	b.n	8001cb2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <HAL_ADC_Start_IT+0x1ac>)
 8001cbc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d12a      	bne.n	8001d3e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_ADC_Start_IT+0x1b0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d015      	beq.n	8001d1e <HAL_ADC_Start_IT+0x132>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_ADC_Start_IT+0x1b4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_Start_IT+0x11c>
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_ADC_Start_IT+0x1ac>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_ADC_Start_IT+0x1b8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d136      	bne.n	8001d80 <HAL_ADC_Start_IT+0x194>
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <HAL_ADC_Start_IT+0x1ac>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d130      	bne.n	8001d80 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d129      	bne.n	8001d80 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e020      	b.n	8001d80 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_ADC_Start_IT+0x1b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d11b      	bne.n	8001d80 <HAL_ADC_Start_IT+0x194>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d114      	bne.n	8001d80 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	e00b      	b.n	8001d80 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0210 	orr.w	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000
 8001d94:	431bde83 	.word	0x431bde83
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	40012100 	.word	0x40012100
 8001da4:	40012200 	.word	0x40012200

08001da8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_Stop_IT+0x16>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e02b      	b.n	8001e16 <HAL_ADC_Stop_IT+0x6e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d113      	bne.n	8001e0c <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001df2:	f023 0320 	bic.w	r3, r3, #32
 8001df6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d049      	beq.n	8001eec <HAL_ADC_IRQHandler+0xca>
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d046      	beq.n	8001eec <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d12b      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d127      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d119      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0220 	bic.w	r2, r2, #32
 8001eb6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fb49 	bl	8001574 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0212 	mvn.w	r2, #18
 8001eea:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d057      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0x190>
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d054      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d139      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d12b      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d124      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d11d      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa8c 	bl	80024c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 020c 	mvn.w	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x1d6>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d014      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d10d      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f837 	bl	800205c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0201 	mvn.w	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002006:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_ADC_IRQHandler+0x218>
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0220 	mvn.w	r2, #32
 8002028:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f820 	bl	8002070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0220 	mvn.w	r2, #32
 8002038:	601a      	str	r2, [r3, #0]
  }
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e105      	b.n	80022ac <HAL_ADC_ConfigChannel+0x228>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d925      	bls.n	80020fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	3b1e      	subs	r3, #30
 80020c6:	2207      	movs	r2, #7
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43da      	mvns	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	400a      	ands	r2, r1
 80020d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	4603      	mov	r3, r0
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4403      	add	r3, r0
 80020ee:	3b1e      	subs	r3, #30
 80020f0:	409a      	lsls	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	e022      	b.n	8002142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6919      	ldr	r1, [r3, #16]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	2207      	movs	r2, #7
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	400a      	ands	r2, r1
 800211e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6919      	ldr	r1, [r3, #16]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	4603      	mov	r3, r0
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4403      	add	r3, r0
 8002138:	409a      	lsls	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b06      	cmp	r3, #6
 8002148:	d824      	bhi.n	8002194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b05      	subs	r3, #5
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b05      	subs	r3, #5
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
 8002192:	e04c      	b.n	800222e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d824      	bhi.n	80021e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b23      	subs	r3, #35	; 0x23
 80021ae:	221f      	movs	r2, #31
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	400a      	ands	r2, r1
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b23      	subs	r3, #35	; 0x23
 80021d8:	fa00 f203 	lsl.w	r2, r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
 80021e4:	e023      	b.n	800222e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b41      	subs	r3, #65	; 0x41
 80021f8:	221f      	movs	r2, #31
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	400a      	ands	r2, r1
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b41      	subs	r3, #65	; 0x41
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_ADC_ConfigChannel+0x234>)
 8002230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_ADC_ConfigChannel+0x238>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d109      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1cc>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d105      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_ADC_ConfigChannel+0x238>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d123      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x21e>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d003      	beq.n	800226a <HAL_ADC_ConfigChannel+0x1e6>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b11      	cmp	r3, #17
 8002268:	d11b      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d111      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_ADC_ConfigChannel+0x240>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	0c9a      	lsrs	r2, r3, #18
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002294:	e002      	b.n	800229c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40012300 	.word	0x40012300
 80022bc:	40012000 	.word	0x40012000
 80022c0:	20000000 	.word	0x20000000
 80022c4:	431bde83 	.word	0x431bde83

080022c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d0:	4b79      	ldr	r3, [pc, #484]	; (80024b8 <ADC_Init+0x1f0>)
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	021a      	lsls	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	4a58      	ldr	r2, [pc, #352]	; (80024bc <ADC_Init+0x1f4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	e00f      	b.n	80023c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0202 	bic.w	r2, r2, #2
 80023d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e1b      	ldrb	r3, [r3, #24]
 80023e0:	005a      	lsls	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002402:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	3b01      	subs	r3, #1
 8002420:	035a      	lsls	r2, r3, #13
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e007      	b.n	800243c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	3b01      	subs	r3, #1
 8002458:	051a      	lsls	r2, r3, #20
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247e:	025a      	lsls	r2, r3, #9
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	029a      	lsls	r2, r3, #10
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40012300 	.word	0x40012300
 80024bc:	0f000001 	.word	0x0f000001

080024c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0ed      	b.n	80026c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff f8ec 	bl	80016d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7ff fafc 	bl	8001b04 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800250e:	e012      	b.n	8002536 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002510:	f7ff faf8 	bl	8001b04 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b0a      	cmp	r3, #10
 800251c:	d90b      	bls.n	8002536 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0c5      	b.n	80026c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0e5      	beq.n	8002510 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0202 	bic.w	r2, r2, #2
 8002552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002554:	f7ff fad6 	bl	8001b04 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800255a:	e012      	b.n	8002582 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800255c:	f7ff fad2 	bl	8001b04 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b0a      	cmp	r3, #10
 8002568:	d90b      	bls.n	8002582 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2205      	movs	r2, #5
 800257a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e09f      	b.n	80026c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1e5      	bne.n	800255c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d108      	bne.n	80025aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e007      	b.n	80025ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7e5b      	ldrb	r3, [r3, #25]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d108      	bne.n	80025d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e007      	b.n	80025e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7e9b      	ldrb	r3, [r3, #26]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d108      	bne.n	80025fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0220 	orr.w	r2, r2, #32
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e007      	b.n	800260e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0220 	bic.w	r2, r2, #32
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7edb      	ldrb	r3, [r3, #27]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0210 	bic.w	r2, r2, #16
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0210 	orr.w	r2, r2, #16
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7f1b      	ldrb	r3, [r3, #28]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0208 	orr.w	r2, r2, #8
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e007      	b.n	8002662 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7f5b      	ldrb	r3, [r3, #29]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0204 	orr.w	r2, r2, #4
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0204 	bic.w	r2, r2, #4
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	ea42 0103 	orr.w	r1, r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d12e      	bne.n	800273c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026f6:	f7ff fa05 	bl	8001b04 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026fc:	e012      	b.n	8002724 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026fe:	f7ff fa01 	bl	8001b04 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b0a      	cmp	r3, #10
 800270a:	d90b      	bls.n	8002724 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2205      	movs	r2, #5
 800271c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e012      	b.n	800274a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e5      	bne.n	80026fe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e006      	b.n	800274a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002752:	b480      	push	{r7}
 8002754:	b089      	sub	sp, #36	; 0x24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002766:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d003      	beq.n	800277e <HAL_CAN_AddTxMessage+0x2c>
 8002776:	7ffb      	ldrb	r3, [r7, #31]
 8002778:	2b02      	cmp	r3, #2
 800277a:	f040 80ad 	bne.w	80028d8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8095 	beq.w	80028c8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027a8:	2201      	movs	r2, #1
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	409a      	lsls	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	6809      	ldr	r1, [r1, #0]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3318      	adds	r3, #24
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	440b      	add	r3, r1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e00f      	b.n	80027f6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3318      	adds	r3, #24
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	440b      	add	r3, r1
 80027f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3318      	adds	r3, #24
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	440b      	add	r3, r1
 8002806:	3304      	adds	r3, #4
 8002808:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	7d1b      	ldrb	r3, [r3, #20]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d111      	bne.n	8002836 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3318      	adds	r3, #24
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	6811      	ldr	r1, [r2, #0]
 8002826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3318      	adds	r3, #24
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	440b      	add	r3, r1
 8002832:	3304      	adds	r3, #4
 8002834:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3307      	adds	r3, #7
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	061a      	lsls	r2, r3, #24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3306      	adds	r3, #6
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3305      	adds	r3, #5
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4313      	orrs	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	3204      	adds	r2, #4
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	4610      	mov	r0, r2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6811      	ldr	r1, [r2, #0]
 800285e:	ea43 0200 	orr.w	r2, r3, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	440b      	add	r3, r1
 8002868:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800286c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3303      	adds	r3, #3
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	061a      	lsls	r2, r3, #24
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3302      	adds	r3, #2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3301      	adds	r3, #1
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	4313      	orrs	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	4610      	mov	r0, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	ea43 0200 	orr.w	r2, r3, r0
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	440b      	add	r3, r1
 800289e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3318      	adds	r3, #24
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4413      	add	r3, r2
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6811      	ldr	r1, [r2, #0]
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3318      	adds	r3, #24
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	440b      	add	r3, r1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e00e      	b.n	80028e6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e006      	b.n	80028e6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff29 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff3e 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff8e 	bl	80029e8 <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff31 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffa2 	bl	8002a50 <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7fe ffee 	bl	8001b04 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e099      	b.n	8002c68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b54:	e00f      	b.n	8002b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b56:	f7fe ffd5 	bl	8001b04 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d908      	bls.n	8002b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e078      	b.n	8002c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e8      	bne.n	8002b56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <HAL_DMA_Init+0x158>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d117      	bne.n	8002c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fb01 	bl	8003224 <DMA_CheckFifoParam>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c36:	2301      	movs	r3, #1
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fab8 	bl	80031b8 <DMA_CalcBaseAndBitshift>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	223f      	movs	r2, #63	; 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	f010803f 	.word	0xf010803f

08002c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA_Start_IT+0x26>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e040      	b.n	8002d1c <HAL_DMA_Start_IT+0xa8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d12f      	bne.n	8002d0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fa4a 	bl	800315c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	223f      	movs	r2, #63	; 0x3f
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0216 	orr.w	r2, r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0208 	orr.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e005      	b.n	8002d1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d32:	f7fe fee7 	bl	8001b04 <HAL_GetTick>
 8002d36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d008      	beq.n	8002d56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e052      	b.n	8002dfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0216 	bic.w	r2, r2, #22
 8002d64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_DMA_Abort+0x62>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0208 	bic.w	r2, r2, #8
 8002d94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da6:	e013      	b.n	8002dd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da8:	f7fe feac 	bl	8001b04 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	d90c      	bls.n	8002dd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e015      	b.n	8002dfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e4      	bne.n	8002da8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	223f      	movs	r2, #63	; 0x3f
 8002de4:	409a      	lsls	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00c      	b.n	8002e3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2205      	movs	r2, #5
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e54:	4b8e      	ldr	r3, [pc, #568]	; (8003090 <HAL_DMA_IRQHandler+0x248>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a8e      	ldr	r2, [pc, #568]	; (8003094 <HAL_DMA_IRQHandler+0x24c>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2208      	movs	r2, #8
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01a      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	2204      	movs	r2, #4
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d012      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	2210      	movs	r2, #16
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d043      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03c      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2210      	movs	r2, #16
 8002f44:	409a      	lsls	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d024      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
 8002f76:	e01f      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e016      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0208 	bic.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 808f 	beq.w	80030e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8087 	beq.w	80030e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2220      	movs	r2, #32
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d136      	bne.n	8003060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0216 	bic.w	r2, r2, #22
 8003000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_DMA_IRQHandler+0x1da>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	223f      	movs	r2, #63	; 0x3f
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d07e      	beq.n	8003154 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
        }
        return;
 800305e:	e079      	b.n	8003154 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	d031      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e02c      	b.n	80030e8 <HAL_DMA_IRQHandler+0x2a0>
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000
 8003094:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
 80030a8:	e01e      	b.n	80030e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0210 	bic.w	r2, r2, #16
 80030c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d032      	beq.n	8003156 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d022      	beq.n	8003142 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2205      	movs	r2, #5
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3301      	adds	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	d307      	bcc.n	8003130 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f2      	bne.n	8003114 <HAL_DMA_IRQHandler+0x2cc>
 800312e:	e000      	b.n	8003132 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003130:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
 8003152:	e000      	b.n	8003156 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003154:	bf00      	nop
    }
  }
}
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003178:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d108      	bne.n	800319c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800319a:	e007      	b.n	80031ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3b10      	subs	r3, #16
 80031c8:	4a14      	ldr	r2, [pc, #80]	; (800321c <DMA_CalcBaseAndBitshift+0x64>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031d2:	4a13      	ldr	r2, [pc, #76]	; (8003220 <DMA_CalcBaseAndBitshift+0x68>)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d909      	bls.n	80031fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	1d1a      	adds	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	659a      	str	r2, [r3, #88]	; 0x58
 80031f8:	e007      	b.n	800320a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	aaaaaaab 	.word	0xaaaaaaab
 8003220:	08005ddc 	.word	0x08005ddc

08003224 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11f      	bne.n	800327e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d856      	bhi.n	80032f2 <DMA_CheckFifoParam+0xce>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <DMA_CheckFifoParam+0x28>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	0800325d 	.word	0x0800325d
 8003250:	0800326f 	.word	0x0800326f
 8003254:	0800325d 	.word	0x0800325d
 8003258:	080032f3 	.word	0x080032f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d046      	beq.n	80032f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326c:	e043      	b.n	80032f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003276:	d140      	bne.n	80032fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327c:	e03d      	b.n	80032fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003286:	d121      	bne.n	80032cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d837      	bhi.n	80032fe <DMA_CheckFifoParam+0xda>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <DMA_CheckFifoParam+0x70>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032a5 	.word	0x080032a5
 8003298:	080032ab 	.word	0x080032ab
 800329c:	080032a5 	.word	0x080032a5
 80032a0:	080032bd 	.word	0x080032bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e030      	b.n	800330c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d025      	beq.n	8003302 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ba:	e022      	b.n	8003302 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c4:	d11f      	bne.n	8003306 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032ca:	e01c      	b.n	8003306 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d903      	bls.n	80032da <DMA_CheckFifoParam+0xb6>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d003      	beq.n	80032e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032d8:	e018      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
      break;
 80032de:	e015      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      break;
 80032f0:	e00b      	b.n	800330a <DMA_CheckFifoParam+0xe6>
      break;
 80032f2:	bf00      	nop
 80032f4:	e00a      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
 80032f8:	e008      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
 80032fc:	e006      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      break;
 80032fe:	bf00      	nop
 8003300:	e004      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      break;   
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <DMA_CheckFifoParam+0xe8>
      break;
 800330a:	bf00      	nop
    }
  } 
  
  return status; 
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e16b      	b.n	8003610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	f040 815a 	bne.w	800360a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d005      	beq.n	800336e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336a:	2b02      	cmp	r3, #2
 800336c:	d130      	bne.n	80033d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2203      	movs	r2, #3
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0201 	and.w	r2, r3, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d017      	beq.n	800340c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d123      	bne.n	8003460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	08da      	lsrs	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3208      	adds	r2, #8
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80b4 	beq.w	800360a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b60      	ldr	r3, [pc, #384]	; (8003628 <HAL_GPIO_Init+0x30c>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a5f      	ldr	r2, [pc, #380]	; (8003628 <HAL_GPIO_Init+0x30c>)
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b5d      	ldr	r3, [pc, #372]	; (8003628 <HAL_GPIO_Init+0x30c>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034be:	4a5b      	ldr	r2, [pc, #364]	; (800362c <HAL_GPIO_Init+0x310>)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_GPIO_Init+0x314>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d02b      	beq.n	8003542 <HAL_GPIO_Init+0x226>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a51      	ldr	r2, [pc, #324]	; (8003634 <HAL_GPIO_Init+0x318>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d025      	beq.n	800353e <HAL_GPIO_Init+0x222>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a50      	ldr	r2, [pc, #320]	; (8003638 <HAL_GPIO_Init+0x31c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <HAL_GPIO_Init+0x21e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4f      	ldr	r2, [pc, #316]	; (800363c <HAL_GPIO_Init+0x320>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d019      	beq.n	8003536 <HAL_GPIO_Init+0x21a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4e      	ldr	r2, [pc, #312]	; (8003640 <HAL_GPIO_Init+0x324>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x216>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4d      	ldr	r2, [pc, #308]	; (8003644 <HAL_GPIO_Init+0x328>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00d      	beq.n	800352e <HAL_GPIO_Init+0x212>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4c      	ldr	r2, [pc, #304]	; (8003648 <HAL_GPIO_Init+0x32c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <HAL_GPIO_Init+0x20e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <HAL_GPIO_Init+0x330>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_GPIO_Init+0x20a>
 8003522:	2307      	movs	r3, #7
 8003524:	e00e      	b.n	8003544 <HAL_GPIO_Init+0x228>
 8003526:	2308      	movs	r3, #8
 8003528:	e00c      	b.n	8003544 <HAL_GPIO_Init+0x228>
 800352a:	2306      	movs	r3, #6
 800352c:	e00a      	b.n	8003544 <HAL_GPIO_Init+0x228>
 800352e:	2305      	movs	r3, #5
 8003530:	e008      	b.n	8003544 <HAL_GPIO_Init+0x228>
 8003532:	2304      	movs	r3, #4
 8003534:	e006      	b.n	8003544 <HAL_GPIO_Init+0x228>
 8003536:	2303      	movs	r3, #3
 8003538:	e004      	b.n	8003544 <HAL_GPIO_Init+0x228>
 800353a:	2302      	movs	r3, #2
 800353c:	e002      	b.n	8003544 <HAL_GPIO_Init+0x228>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_GPIO_Init+0x228>
 8003542:	2300      	movs	r3, #0
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	f002 0203 	and.w	r2, r2, #3
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	4093      	lsls	r3, r2
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003554:	4935      	ldr	r1, [pc, #212]	; (800362c <HAL_GPIO_Init+0x310>)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_GPIO_Init+0x334>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003586:	4a32      	ldr	r2, [pc, #200]	; (8003650 <HAL_GPIO_Init+0x334>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800358c:	4b30      	ldr	r3, [pc, #192]	; (8003650 <HAL_GPIO_Init+0x334>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <HAL_GPIO_Init+0x334>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035b6:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_GPIO_Init+0x334>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_GPIO_Init+0x334>)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e0:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_GPIO_Init+0x334>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <HAL_GPIO_Init+0x334>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3301      	adds	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	f67f ae90 	bls.w	8003338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	3724      	adds	r7, #36	; 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	40013800 	.word	0x40013800
 8003630:	40020000 	.word	0x40020000
 8003634:	40020400 	.word	0x40020400
 8003638:	40020800 	.word	0x40020800
 800363c:	40020c00 	.word	0x40020c00
 8003640:	40021000 	.word	0x40021000
 8003644:	40021400 	.word	0x40021400
 8003648:	40021800 	.word	0x40021800
 800364c:	40021c00 	.word	0x40021c00
 8003650:	40013c00 	.word	0x40013c00

08003654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e001      	b.n	8003676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036a0:	e003      	b.n	80036aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	041a      	lsls	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd ff5c 	bl	8001594 <HAL_GPIO_EXTI_Callback>
  }
}
 80036dc:	bf00      	nop
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e267      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d075      	beq.n	80037f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00c      	beq.n	800372c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	2b08      	cmp	r3, #8
 800371c:	d112      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b82      	ldr	r3, [pc, #520]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x108>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d157      	bne.n	80037f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e242      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x74>
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x98>
 8003766:	4b70      	ldr	r3, [pc, #448]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6f      	ldr	r2, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6c      	ldr	r2, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 8003780:	4b69      	ldr	r3, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a65      	ldr	r2, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe f9b0 	bl	8001b04 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe f9ac 	bl	8001b04 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e207      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xc0>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe f99c 	bl	8001b04 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe f998 	bl	8001b04 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1f3      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0xe8>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d063      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1c7      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4937      	ldr	r1, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_OscConfig+0x244>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fe f951 	bl	8001b04 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7fe f94d 	bl	8001b04 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1a8      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_OscConfig+0x244>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe f930 	bl	8001b04 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fe f92c 	bl	8001b04 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e187      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d036      	beq.n	8003940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x248>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe f910 	bl	8001b04 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fe f90c 	bl	8001b04 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e167      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x200>
 8003906:	e01b      	b.n	8003940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_OscConfig+0x248>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fe f8f9 	bl	8001b04 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	e00e      	b.n	8003934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe f8f5 	bl	8001b04 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d907      	bls.n	8003934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e150      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ea      	bne.n	8003916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8097 	beq.w	8003a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b7d      	ldr	r3, [pc, #500]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a7c      	ldr	r2, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d118      	bne.n	80039bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398a:	4b74      	ldr	r3, [pc, #464]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a73      	ldr	r2, [pc, #460]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fe f8b5 	bl	8001b04 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fe f8b1 	bl	8001b04 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e10c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2ea>
 80039c4:	4b64      	ldr	r3, [pc, #400]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a63      	ldr	r2, [pc, #396]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	e01c      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x30c>
 80039da:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a5b      	ldr	r2, [pc, #364]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039f4:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a57      	ldr	r2, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a54      	ldr	r2, [pc, #336]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fe f876 	bl	8001b04 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe f872 	bl	8001b04 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0cb      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCC_OscConfig+0x334>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a40:	f7fe f860 	bl	8001b04 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe f85c 	bl	8001b04 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0b5      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ee      	bne.n	8003a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a1 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d05c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d141      	bne.n	8003b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f830 	bl	8001b04 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe f82c 	bl	8001b04 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e087      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fe f805 	bl	8001b04 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe f801 	bl	8001b04 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e05c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x416>
 8003b1c:	e054      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd ffee 	bl	8001b04 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd ffea 	bl	8001b04 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e045      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x444>
 8003b4a:	e03d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e038      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x4ec>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d028      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d121      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d11a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800

08003bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cc      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b68      	ldr	r3, [pc, #416]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90c      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b63      	ldr	r3, [pc, #396]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0b8      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a58      	ldr	r2, [pc, #352]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	494d      	ldr	r1, [pc, #308]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d044      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e067      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd ff1c 	bl	8001b04 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fd ff18 	bl	8001b04 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d20c      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4916      	ldr	r1, [pc, #88]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490e      	ldr	r1, [pc, #56]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5e:	f000 f821 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490a      	ldr	r1, [pc, #40]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd fe7c 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00
 8003d94:	40023800 	.word	0x40023800
 8003d98:	08005dc4 	.word	0x08005dc4
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b094      	sub	sp, #80	; 0x50
 8003daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
 8003db0:	2300      	movs	r3, #0
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	2300      	movs	r3, #0
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dbc:	4b79      	ldr	r3, [pc, #484]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	f200 80e1 	bhi.w	8003f90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd6:	e0db      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ddc:	e0db      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dde:	4b73      	ldr	r3, [pc, #460]	; (8003fac <HAL_RCC_GetSysClockFreq+0x208>)
 8003de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003de2:	e0d8      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dee:	4b6d      	ldr	r3, [pc, #436]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d063      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	2200      	movs	r2, #0
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0e:	2300      	movs	r3, #0
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
 8003e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	f04f 0000 	mov.w	r0, #0
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	0159      	lsls	r1, r3, #5
 8003e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e28:	0150      	lsls	r0, r2, #5
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4621      	mov	r1, r4
 8003e30:	1a51      	subs	r1, r2, r1
 8003e32:	6139      	str	r1, [r7, #16]
 8003e34:	4629      	mov	r1, r5
 8003e36:	eb63 0301 	sbc.w	r3, r3, r1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e48:	4659      	mov	r1, fp
 8003e4a:	018b      	lsls	r3, r1, #6
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e52:	4651      	mov	r1, sl
 8003e54:	018a      	lsls	r2, r1, #6
 8003e56:	4651      	mov	r1, sl
 8003e58:	ebb2 0801 	subs.w	r8, r2, r1
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e76:	4690      	mov	r8, r2
 8003e78:	4699      	mov	r9, r3
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	eb18 0303 	adds.w	r3, r8, r3
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	462b      	mov	r3, r5
 8003e84:	eb49 0303 	adc.w	r3, r9, r3
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e96:	4629      	mov	r1, r5
 8003e98:	024b      	lsls	r3, r1, #9
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	024a      	lsls	r2, r1, #9
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eaa:	2200      	movs	r2, #0
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eb4:	f7fc fd76 	bl	80009a4 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec0:	e058      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	4611      	mov	r1, r2
 8003ece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	f04f 0000 	mov.w	r0, #0
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	0159      	lsls	r1, r3, #5
 8003eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eee:	0150      	lsls	r0, r2, #5
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003efa:	4649      	mov	r1, r9
 8003efc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f14:	ebb2 040a 	subs.w	r4, r2, sl
 8003f18:	eb63 050b 	sbc.w	r5, r3, fp
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	00eb      	lsls	r3, r5, #3
 8003f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2a:	00e2      	lsls	r2, r4, #3
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	461d      	mov	r5, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	18e3      	adds	r3, r4, r3
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	464b      	mov	r3, r9
 8003f38:	eb45 0303 	adc.w	r3, r5, r3
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	028b      	lsls	r3, r1, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f54:	4621      	mov	r1, r4
 8003f56:	028a      	lsls	r2, r1, #10
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	61fa      	str	r2, [r7, #28]
 8003f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f68:	f7fc fd1c 	bl	80009a4 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3750      	adds	r7, #80	; 0x50
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	00f42400 	.word	0x00f42400
 8003fac:	007a1200 	.word	0x007a1200

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000000 	.word	0x20000000

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fcc:	f7ff fff0 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4903      	ldr	r1, [pc, #12]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	08005dd4 	.word	0x08005dd4

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffdc 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0b5b      	lsrs	r3, r3, #13
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	08005dd4 	.word	0x08005dd4

08004018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e041      	b.n	80040ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd fb8e 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f000 f95e 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d001      	beq.n	80040d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e046      	b.n	800415e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_TIM_Base_Start+0xb4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d022      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d01d      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_TIM_Base_Start+0xb8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_TIM_Base_Start+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_TIM_Base_Start+0xc0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_TIM_Base_Start+0xc4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_TIM_Base_Start+0xc8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <HAL_TIM_Base_Start+0xcc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d010      	beq.n	800415c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	e007      	b.n	800415c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40014000 	.word	0x40014000
 8004184:	40001800 	.word	0x40001800

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x1c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0b4      	b.n	800430e <HAL_TIM_ConfigClockSource+0x186>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd4>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x172>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xa6>
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfa>
 8004208:	2b50      	cmp	r3, #80	; 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	f000 f991 	bl	8004564 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	f000 f97a 	bl	8004564 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	461a      	mov	r2, r3
 8004290:	f000 f8ee 	bl	8004470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	; 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f947 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 f90d 	bl	80044ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	; 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f937 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 f8ce 	bl	8004470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f927 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 f91e 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a46      	ldr	r2, [pc, #280]	; (8004444 <TIM_Base_SetConfig+0x12c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d00f      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a43      	ldr	r2, [pc, #268]	; (8004448 <TIM_Base_SetConfig+0x130>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00b      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a42      	ldr	r2, [pc, #264]	; (800444c <TIM_Base_SetConfig+0x134>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a41      	ldr	r2, [pc, #260]	; (8004450 <TIM_Base_SetConfig+0x138>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a40      	ldr	r2, [pc, #256]	; (8004454 <TIM_Base_SetConfig+0x13c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a35      	ldr	r2, [pc, #212]	; (8004444 <TIM_Base_SetConfig+0x12c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02b      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d027      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a32      	ldr	r2, [pc, #200]	; (8004448 <TIM_Base_SetConfig+0x130>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d023      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a31      	ldr	r2, [pc, #196]	; (800444c <TIM_Base_SetConfig+0x134>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01f      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a30      	ldr	r2, [pc, #192]	; (8004450 <TIM_Base_SetConfig+0x138>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01b      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2f      	ldr	r2, [pc, #188]	; (8004454 <TIM_Base_SetConfig+0x13c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d017      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2e      	ldr	r2, [pc, #184]	; (8004458 <TIM_Base_SetConfig+0x140>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2d      	ldr	r2, [pc, #180]	; (800445c <TIM_Base_SetConfig+0x144>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00f      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <TIM_Base_SetConfig+0x148>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00b      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <TIM_Base_SetConfig+0x14c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2a      	ldr	r2, [pc, #168]	; (8004468 <TIM_Base_SetConfig+0x150>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a29      	ldr	r2, [pc, #164]	; (800446c <TIM_Base_SetConfig+0x154>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <TIM_Base_SetConfig+0x12c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0xf8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <TIM_Base_SetConfig+0x13c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f023 0201 	bic.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	611a      	str	r2, [r3, #16]
  }
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40010400 	.word	0x40010400
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800
 8004464:	40001800 	.word	0x40001800
 8004468:	40001c00 	.word	0x40001c00
 800446c:	40002000 	.word	0x40002000

08004470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 030a 	bic.w	r3, r3, #10
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f023 0210 	bic.w	r2, r3, #16
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	f043 0307 	orr.w	r3, r3, #7
 8004550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	021a      	lsls	r2, r3, #8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	431a      	orrs	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4313      	orrs	r3, r2
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e05a      	b.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a21      	ldr	r2, [pc, #132]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d022      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004608:	d01d      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d018      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10c      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4313      	orrs	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010000 	.word	0x40010000
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40010400 	.word	0x40010400
 8004694:	40014000 	.word	0x40014000
 8004698:	40001800 	.word	0x40001800

0800469c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e04a      	b.n	8004744 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd f86e 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 f8c3 	bl	800586c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004704:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0208 	orr.w	r2, r2, #8
 8004714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b20      	cmp	r3, #32
 800476a:	d175      	bne.n	8004858 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Transmit+0x2c>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e06e      	b.n	800485a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2221      	movs	r2, #33	; 0x21
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478a:	f7fd f9bb 	bl	8001b04 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	88fa      	ldrh	r2, [r7, #6]
 800479a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d108      	bne.n	80047b8 <HAL_UART_Transmit+0x6c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e003      	b.n	80047c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047c0:	e02e      	b.n	8004820 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fd94 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e03a      	b.n	800485a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	3302      	adds	r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e007      	b.n	8004812 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1cb      	bne.n	80047c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	2140      	movs	r1, #64	; 0x40
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fd60 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e006      	b.n	800485a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	; 0x28
 8004866:	af02      	add	r7, sp, #8
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	f040 8081 	bne.w	8004986 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Receive+0x2e>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e079      	b.n	8004988 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2222      	movs	r2, #34	; 0x22
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a8:	f7fd f92c 	bl	8001b04 <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d108      	bne.n	80048d6 <HAL_UART_Receive+0x74>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e003      	b.n	80048de <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048de:	e047      	b.n	8004970 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2120      	movs	r1, #32
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fd05 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e042      	b.n	8004988 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10c      	bne.n	8004922 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	b29a      	uxth	r2, r3
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	3302      	adds	r3, #2
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	e01f      	b.n	8004962 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	d007      	beq.n	800493c <HAL_UART_Receive+0xda>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <HAL_UART_Receive+0xe8>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e008      	b.n	800495c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004956:	b2da      	uxtb	r2, r3
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1b2      	bne.n	80048e0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	; 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d156      	bne.n	8004a58 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_UART_Transmit_DMA+0x26>
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e04f      	b.n	8004a5a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2221      	movs	r2, #33	; 0x21
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_UART_Transmit_DMA+0xd4>)
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_UART_Transmit_DMA+0xd8>)
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	4a1f      	ldr	r2, [pc, #124]	; (8004a6c <HAL_UART_Transmit_DMA+0xdc>)
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2200      	movs	r2, #0
 80049f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	6819      	ldr	r1, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	461a      	mov	r2, r3
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	f7fe f92f 	bl	8002c74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a40:	627a      	str	r2, [r7, #36]	; 0x24
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6a39      	ldr	r1, [r7, #32]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3730      	adds	r7, #48	; 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	08005049 	.word	0x08005049
 8004a68:	080050e3 	.word	0x080050e3
 8004a6c:	08005267 	.word	0x08005267

08004a70 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d112      	bne.n	8004ab0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_UART_Receive_DMA+0x26>
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00b      	b.n	8004ab2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fc80 	bl	80053ac <UART_Start_Receive_DMA>
 8004aac:	4603      	mov	r3, r0
 8004aae:	e000      	b.n	8004ab2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b0ba      	sub	sp, #232	; 0xe8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_UART_IRQHandler+0x66>
 8004b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fde7 	bl	80056ee <UART_Receive_IT>
      return;
 8004b20:	e25b      	b.n	8004fda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80de 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x22c>
 8004b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80d1 	beq.w	8004ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_UART_IRQHandler+0xae>
 8004b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_UART_IRQHandler+0xd2>
 8004b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f043 0202 	orr.w	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xf6>
 8004b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	f043 0204 	orr.w	r2, r3, #4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d011      	beq.n	8004be2 <HAL_UART_IRQHandler+0x126>
 8004bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0208 	orr.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 81f2 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_UART_IRQHandler+0x14e>
 8004bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fd72 	bl	80056ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <HAL_UART_IRQHandler+0x17a>
 8004c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04f      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fc7a 	bl	8005530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d141      	bne.n	8004cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1d9      	bne.n	8004c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d013      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	4a7e      	ldr	r2, [pc, #504]	; (8004e9c <HAL_UART_IRQHandler+0x3e0>)
 8004ca4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe f8aa 	bl	8002e04 <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	e00e      	b.n	8004ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9a8 	bl	800501c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e00a      	b.n	8004ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9a4 	bl	800501c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e006      	b.n	8004ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9a0 	bl	800501c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004ce2:	e175      	b.n	8004fd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	bf00      	nop
    return;
 8004ce6:	e173      	b.n	8004fd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	f040 814f 	bne.w	8004f90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8148 	beq.w	8004f90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8141 	beq.w	8004f90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	f040 80b6 	bne.w	8004ea0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8145 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f080 813e 	bcs.w	8004fd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	f000 8088 	beq.w	8004e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1d9      	bne.n	8004d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3314      	adds	r3, #20
 8004dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e1      	bne.n	8004dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e3      	bne.n	8004df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	f023 0310 	bic.w	r3, r3, #16
 8004e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e3      	bne.n	8004e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd ff53 	bl	8002d24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8cb 	bl	8005030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e9a:	e09b      	b.n	8004fd4 <HAL_UART_IRQHandler+0x518>
 8004e9c:	080055f7 	.word	0x080055f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 808e 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8089 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004edc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004eea:	647a      	str	r2, [r7, #68]	; 0x44
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e3      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f22:	633a      	str	r2, [r7, #48]	; 0x30
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e3      	bne.n	8004efe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0310 	bic.w	r3, r3, #16
 8004f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f68:	61fa      	str	r2, [r7, #28]
 8004f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	617b      	str	r3, [r7, #20]
   return(result);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e3      	bne.n	8004f44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f851 	bl	8005030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f8e:	e023      	b.n	8004fd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x4f4>
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fb38 	bl	800561e <UART_Transmit_IT>
    return;
 8004fae:	e014      	b.n	8004fda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <HAL_UART_IRQHandler+0x51e>
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fb78 	bl	80056be <UART_EndTransmit_IT>
    return;
 8004fce:	e004      	b.n	8004fda <HAL_UART_IRQHandler+0x51e>
    return;
 8004fd0:	bf00      	nop
 8004fd2:	e002      	b.n	8004fda <HAL_UART_IRQHandler+0x51e>
      return;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <HAL_UART_IRQHandler+0x51e>
      return;
 8004fd8:	bf00      	nop
  }
}
 8004fda:	37e8      	adds	r7, #232	; 0xe8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b090      	sub	sp, #64	; 0x40
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d137      	bne.n	80050d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	2200      	movs	r2, #0
 8005068:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3314      	adds	r3, #20
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	623b      	str	r3, [r7, #32]
   return(result);
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005080:	63bb      	str	r3, [r7, #56]	; 0x38
 8005082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3314      	adds	r3, #20
 8005088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800508a:	633a      	str	r2, [r7, #48]	; 0x30
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800509e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050be:	61fa      	str	r2, [r7, #28]
 80050c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	617b      	str	r3, [r7, #20]
   return(result);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050d2:	e002      	b.n	80050da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80050d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80050d6:	f7ff ff83 	bl	8004fe0 <HAL_UART_TxCpltCallback>
}
 80050da:	bf00      	nop
 80050dc:	3740      	adds	r7, #64	; 0x40
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff ff7f 	bl	8004ff4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b09c      	sub	sp, #112	; 0x70
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d172      	bne.n	8005200 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800511a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511c:	2200      	movs	r2, #0
 800511e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005136:	66bb      	str	r3, [r7, #104]	; 0x68
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005140:	65ba      	str	r2, [r7, #88]	; 0x58
 8005142:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800514e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	667b      	str	r3, [r7, #100]	; 0x64
 800516c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3314      	adds	r3, #20
 8005172:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005174:	647a      	str	r2, [r7, #68]	; 0x44
 8005176:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800517a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e5      	bne.n	8005154 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3314      	adds	r3, #20
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	623b      	str	r3, [r7, #32]
   return(result);
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519e:	663b      	str	r3, [r7, #96]	; 0x60
 80051a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3314      	adds	r3, #20
 80051a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051a8:	633a      	str	r2, [r7, #48]	; 0x30
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e5      	bne.n	8005188 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d119      	bne.n	8005200 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	60fb      	str	r3, [r7, #12]
   return(result);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0310 	bic.w	r3, r3, #16
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ec:	61fa      	str	r2, [r7, #28]
 80051ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	69b9      	ldr	r1, [r7, #24]
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	617b      	str	r3, [r7, #20]
   return(result);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800520e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005212:	4619      	mov	r1, r3
 8005214:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005216:	f7ff ff0b 	bl	8005030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800521a:	e002      	b.n	8005222 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800521c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800521e:	f7fb fe15 	bl	8000e4c <HAL_UART_RxCpltCallback>
}
 8005222:	bf00      	nop
 8005224:	3770      	adds	r7, #112	; 0x70
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	2b01      	cmp	r3, #1
 8005244:	d108      	bne.n	8005258 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff feed 	bl	8005030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005256:	e002      	b.n	800525e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fed5 	bl	8005008 <HAL_UART_RxHalfCpltCallback>
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005282:	2b80      	cmp	r3, #128	; 0x80
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b21      	cmp	r3, #33	; 0x21
 8005298:	d108      	bne.n	80052ac <UART_DMAError+0x46>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f000 f91a 	bl	80054e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	d108      	bne.n	80052e0 <UART_DMAError+0x7a>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80052da:	68b8      	ldr	r0, [r7, #8]
 80052dc:	f000 f928 	bl	8005530 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ec:	68b8      	ldr	r0, [r7, #8]
 80052ee:	f7ff fe95 	bl	800501c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e03b      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d037      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fc fbf6 	bl	8001b04 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <UART_WaitOnFlagUntilTimeout+0x30>
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e03a      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d023      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b80      	cmp	r3, #128	; 0x80
 8005340:	d020      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d01d      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b08      	cmp	r3, #8
 8005354:	d116      	bne.n	8005384 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f8df 	bl	8005530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2208      	movs	r2, #8
 8005376:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e00f      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d0b4      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b098      	sub	sp, #96	; 0x60
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2222      	movs	r2, #34	; 0x22
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	4a3e      	ldr	r2, [pc, #248]	; (80054d4 <UART_Start_Receive_DMA+0x128>)
 80053da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	4a3d      	ldr	r2, [pc, #244]	; (80054d8 <UART_Start_Receive_DMA+0x12c>)
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e8:	4a3c      	ldr	r2, [pc, #240]	; (80054dc <UART_Start_Receive_DMA+0x130>)
 80053ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	2200      	movs	r2, #0
 80053f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053f4:	f107 0308 	add.w	r3, r7, #8
 80053f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	f7fd fc32 	bl	8002c74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d019      	beq.n	8005462 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005444:	65bb      	str	r3, [r7, #88]	; 0x58
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e5      	bne.n	800542e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	657b      	str	r3, [r7, #84]	; 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3314      	adds	r3, #20
 8005480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005482:	63ba      	str	r2, [r7, #56]	; 0x38
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e5      	bne.n	8005462 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3314      	adds	r3, #20
 800549c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	617b      	str	r3, [r7, #20]
   return(result);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ac:	653b      	str	r3, [r7, #80]	; 0x50
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3314      	adds	r3, #20
 80054b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054b6:	627a      	str	r2, [r7, #36]	; 0x24
 80054b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6a39      	ldr	r1, [r7, #32]
 80054bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e5      	bne.n	8005496 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3760      	adds	r7, #96	; 0x60
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	080050ff 	.word	0x080050ff
 80054d8:	0800522b 	.word	0x0800522b
 80054dc:	08005267 	.word	0x08005267

080054e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b089      	sub	sp, #36	; 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	61ba      	str	r2, [r7, #24]
 800550a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	613b      	str	r3, [r7, #16]
   return(result);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005524:	bf00      	nop
 8005526:	3724      	adds	r7, #36	; 0x24
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b095      	sub	sp, #84	; 0x54
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005558:	643a      	str	r2, [r7, #64]	; 0x40
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800555e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3314      	adds	r3, #20
 8005572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	61fb      	str	r3, [r7, #28]
   return(result);
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3314      	adds	r3, #20
 800558a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d119      	bne.n	80055dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f023 0310 	bic.w	r3, r3, #16
 80055be:	647b      	str	r3, [r7, #68]	; 0x44
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c8:	61ba      	str	r2, [r7, #24]
 80055ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6979      	ldr	r1, [r7, #20]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	613b      	str	r3, [r7, #16]
   return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055ea:	bf00      	nop
 80055ec:	3754      	adds	r7, #84	; 0x54
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff fd03 	bl	800501c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b21      	cmp	r3, #33	; 0x21
 8005630:	d13e      	bne.n	80056b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d114      	bne.n	8005666 <UART_Transmit_IT+0x48>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d110      	bne.n	8005666 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005658:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	1c9a      	adds	r2, r3, #2
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]
 8005664:	e008      	b.n	8005678 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6211      	str	r1, [r2, #32]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10f      	bne.n	80056ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800569a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fc7e 	bl	8004fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08c      	sub	sp, #48	; 0x30
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b22      	cmp	r3, #34	; 0x22
 8005700:	f040 80ae 	bne.w	8005860 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570c:	d117      	bne.n	800573e <UART_Receive_IT+0x50>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d113      	bne.n	800573e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	b29b      	uxth	r3, r3
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	b29a      	uxth	r2, r3
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
 800573c:	e026      	b.n	800578c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005750:	d007      	beq.n	8005762 <UART_Receive_IT+0x74>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <UART_Receive_IT+0x82>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e008      	b.n	8005782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577c:	b2da      	uxtb	r2, r3
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4619      	mov	r1, r3
 800579a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800579c:	2b00      	cmp	r3, #0
 800579e:	d15d      	bne.n	800585c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0220 	bic.w	r2, r2, #32
 80057ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d135      	bne.n	8005852 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 0310 	bic.w	r3, r3, #16
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	623a      	str	r2, [r7, #32]
 800580e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	61bb      	str	r3, [r7, #24]
   return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b10      	cmp	r3, #16
 800582c:	d10a      	bne.n	8005844 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fbf0 	bl	8005030 <HAL_UARTEx_RxEventCallback>
 8005850:	e002      	b.n	8005858 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb fafa 	bl	8000e4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e002      	b.n	8005862 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3730      	adds	r7, #48	; 0x30
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b0c0      	sub	sp, #256	; 0x100
 8005872:	af00      	add	r7, sp, #0
 8005874:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	68d9      	ldr	r1, [r3, #12]
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	ea40 0301 	orr.w	r3, r0, r1
 8005894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058c4:	f021 010c 	bic.w	r1, r1, #12
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058d2:	430b      	orrs	r3, r1
 80058d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	6999      	ldr	r1, [r3, #24]
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	ea40 0301 	orr.w	r3, r0, r1
 80058f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b8f      	ldr	r3, [pc, #572]	; (8005b38 <UART_SetConfig+0x2cc>)
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d005      	beq.n	800590c <UART_SetConfig+0xa0>
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <UART_SetConfig+0x2d0>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d104      	bne.n	8005916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800590c:	f7fe fb70 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8005910:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005914:	e003      	b.n	800591e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005916:	f7fe fb57 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 800591a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005928:	f040 810c 	bne.w	8005b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800592c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005936:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800593a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	1891      	adds	r1, r2, r2
 8005944:	65b9      	str	r1, [r7, #88]	; 0x58
 8005946:	415b      	adcs	r3, r3
 8005948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800594a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800594e:	4621      	mov	r1, r4
 8005950:	eb12 0801 	adds.w	r8, r2, r1
 8005954:	4629      	mov	r1, r5
 8005956:	eb43 0901 	adc.w	r9, r3, r1
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800596e:	4690      	mov	r8, r2
 8005970:	4699      	mov	r9, r3
 8005972:	4623      	mov	r3, r4
 8005974:	eb18 0303 	adds.w	r3, r8, r3
 8005978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800597c:	462b      	mov	r3, r5
 800597e:	eb49 0303 	adc.w	r3, r9, r3
 8005982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005992:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800599a:	460b      	mov	r3, r1
 800599c:	18db      	adds	r3, r3, r3
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
 80059a0:	4613      	mov	r3, r2
 80059a2:	eb42 0303 	adc.w	r3, r2, r3
 80059a6:	657b      	str	r3, [r7, #84]	; 0x54
 80059a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059b0:	f7fa fff8 	bl	80009a4 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4b61      	ldr	r3, [pc, #388]	; (8005b40 <UART_SetConfig+0x2d4>)
 80059ba:	fba3 2302 	umull	r2, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	011c      	lsls	r4, r3, #4
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	64b9      	str	r1, [r7, #72]	; 0x48
 80059dc:	415b      	adcs	r3, r3
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059e4:	4641      	mov	r1, r8
 80059e6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ea:	4649      	mov	r1, r9
 80059ec:	eb43 0b01 	adc.w	fp, r3, r1
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a04:	4692      	mov	sl, r2
 8005a06:	469b      	mov	fp, r3
 8005a08:	4643      	mov	r3, r8
 8005a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a12:	464b      	mov	r3, r9
 8005a14:	eb4b 0303 	adc.w	r3, fp, r3
 8005a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a30:	460b      	mov	r3, r1
 8005a32:	18db      	adds	r3, r3, r3
 8005a34:	643b      	str	r3, [r7, #64]	; 0x40
 8005a36:	4613      	mov	r3, r2
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a46:	f7fa ffad 	bl	80009a4 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005a52:	fba3 2301 	umull	r2, r3, r3, r1
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2264      	movs	r2, #100	; 0x64
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	1acb      	subs	r3, r1, r3
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005a68:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a74:	441c      	add	r4, r3
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a90:	415b      	adcs	r3, r3
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a98:	4641      	mov	r1, r8
 8005a9a:	1851      	adds	r1, r2, r1
 8005a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	00cb      	lsls	r3, r1, #3
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aba:	4651      	mov	r1, sl
 8005abc:	00ca      	lsls	r2, r1, #3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005acc:	464b      	mov	r3, r9
 8005ace:	460a      	mov	r2, r1
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aec:	460b      	mov	r3, r1
 8005aee:	18db      	adds	r3, r3, r3
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af2:	4613      	mov	r3, r2
 8005af4:	eb42 0303 	adc.w	r3, r2, r3
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b02:	f7fa ff4f 	bl	80009a4 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	2164      	movs	r1, #100	; 0x64
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	3332      	adds	r3, #50	; 0x32
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	f003 0207 	and.w	r2, r3, #7
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4422      	add	r2, r4
 8005b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b34:	e106      	b.n	8005d44 <UART_SetConfig+0x4d8>
 8005b36:	bf00      	nop
 8005b38:	40011000 	.word	0x40011000
 8005b3c:	40011400 	.word	0x40011400
 8005b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	6239      	str	r1, [r7, #32]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b66:	4641      	mov	r1, r8
 8005b68:	1854      	adds	r4, r2, r1
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	eb43 0501 	adc.w	r5, r3, r1
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	00eb      	lsls	r3, r5, #3
 8005b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b7e:	00e2      	lsls	r2, r4, #3
 8005b80:	4614      	mov	r4, r2
 8005b82:	461d      	mov	r5, r3
 8005b84:	4643      	mov	r3, r8
 8005b86:	18e3      	adds	r3, r4, r3
 8005b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	eb45 0303 	adc.w	r3, r5, r3
 8005b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	008b      	lsls	r3, r1, #2
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	008a      	lsls	r2, r1, #2
 8005bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bc4:	f7fa feee 	bl	80009a4 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4b60      	ldr	r3, [pc, #384]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005bce:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	011c      	lsls	r4, r3, #4
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	61b9      	str	r1, [r7, #24]
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	1851      	adds	r1, r2, r1
 8005bfc:	6139      	str	r1, [r7, #16]
 8005bfe:	4649      	mov	r1, r9
 8005c00:	414b      	adcs	r3, r1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c10:	4659      	mov	r1, fp
 8005c12:	00cb      	lsls	r3, r1, #3
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	00ca      	lsls	r2, r1, #3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	4642      	mov	r2, r8
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	460a      	mov	r2, r1
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c50:	4649      	mov	r1, r9
 8005c52:	008b      	lsls	r3, r1, #2
 8005c54:	4641      	mov	r1, r8
 8005c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	008a      	lsls	r2, r1, #2
 8005c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c62:	f7fa fe9f 	bl	80009a4 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	2264      	movs	r2, #100	; 0x64
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	1acb      	subs	r3, r1, r3
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	3332      	adds	r3, #50	; 0x32
 8005c80:	4a33      	ldr	r2, [pc, #204]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8c:	441c      	add	r4, r3
 8005c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c92:	2200      	movs	r2, #0
 8005c94:	673b      	str	r3, [r7, #112]	; 0x70
 8005c96:	677a      	str	r2, [r7, #116]	; 0x74
 8005c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cac:	4641      	mov	r1, r8
 8005cae:	1851      	adds	r1, r2, r1
 8005cb0:	6039      	str	r1, [r7, #0]
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	414b      	adcs	r3, r1
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cc4:	4659      	mov	r1, fp
 8005cc6:	00cb      	lsls	r3, r1, #3
 8005cc8:	4651      	mov	r1, sl
 8005cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cce:	4651      	mov	r1, sl
 8005cd0:	00ca      	lsls	r2, r1, #3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cde:	464b      	mov	r3, r9
 8005ce0:	460a      	mov	r2, r1
 8005ce2:	eb42 0303 	adc.w	r3, r2, r3
 8005ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf2:	667a      	str	r2, [r7, #100]	; 0x64
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d00:	4649      	mov	r1, r9
 8005d02:	008b      	lsls	r3, r1, #2
 8005d04:	4641      	mov	r1, r8
 8005d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	008a      	lsls	r2, r1, #2
 8005d0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d12:	f7fa fe47 	bl	80009a4 <__aeabi_uldivmod>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	2164      	movs	r1, #100	; 0x64
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	3332      	adds	r3, #50	; 0x32
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005d30:	fba2 2303 	umull	r2, r3, r2, r3
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4422      	add	r2, r4
 8005d42:	609a      	str	r2, [r3, #8]
}
 8005d44:	bf00      	nop
 8005d46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d50:	51eb851f 	.word	0x51eb851f

08005d54 <memset>:
 8005d54:	4402      	add	r2, r0
 8005d56:	4603      	mov	r3, r0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d100      	bne.n	8005d5e <memset+0xa>
 8005d5c:	4770      	bx	lr
 8005d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d62:	e7f9      	b.n	8005d58 <memset+0x4>

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4d0d      	ldr	r5, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1b64      	subs	r4, r4, r5
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	42a6      	cmp	r6, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4d0b      	ldr	r5, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f000 f818 	bl	8005dac <_init>
 8005d7c:	1b64      	subs	r4, r4, r5
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2600      	movs	r6, #0
 8005d82:	42a6      	cmp	r6, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8c:	4798      	blx	r3
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d96:	4798      	blx	r3
 8005d98:	3601      	adds	r6, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	08005dec 	.word	0x08005dec
 8005da0:	08005dec 	.word	0x08005dec
 8005da4:	08005dec 	.word	0x08005dec
 8005da8:	08005df0 	.word	0x08005df0

08005dac <_init>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr

08005db8 <_fini>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr
